const config = {
  // Owner, level 10 by default. You no longer need to supply the owner ID, as the bot
  // will pull this information directly from it's application page.

  // Admins, level 9 by default. Array of user ID strings.
  "admins": [],

  // Supports, level 8 by default. Array of user ID strings
  "supports": [],

  // Enter your keys directly or use and .env file instead before hosting on Heroku
  // [Required] Your Discord bot's token. Available @ https://discordapp.com/developers/applications/me
  "discordKey":  {{discordKey}},
  
  // [Optional - Steam games commands] Your Steam Developer's API key. Available @ https://steamcommunity.com/dev/apikey
  "steamKey":  "steamKey",
  
  // [Optional - Music commands] Your Google Developer's API key. Available @ https://console.developers.google.com/
  "googleKey":  "googleKey",

  // [Optional - Push bot's data to private github repo command] Your Github's account & information
  "githubUser": "githubUser",
  "githubPass": "githubPass",
  "githubRepo": "githubRepo",
  "githubCommitAuthor": "githubCommitAuthor",

  // [Optional - Interval bot stats] Your default channel's ID, or your preferred channel for the bot the post its stats
  "statsChannel": "statsChannel",
  
  // [Optional - Interval bot stats] Your default channel's ID, or your preferred channel for the bot the post the server's leaderboard rankings
  "leaderboardChannel": "leaderboardChannel",

  // [Optional - DOTA2-themed server rankings] Replace with our own server ranks/roles' IDs. WIP at the moment!
  "ranking": {
    "immortal": {
      "ascendant":  "457896092827254808",
      "legacy":     "457896331327832065",
      "elder":      "457896408482185227",
      "exalted":    "457896441302482974",
      "infused":    "457896576417792002",
      "corrupted":  "457896621120815119",
      "cursed":     "457896844152799232",
      "genuine":    "457896900939612167",
      "heroic":     "457896970426515479",
      "auspicious": "457897042866470912",
      "inscribed":  "457897143709990912"
    },
    "divine": {
      "exalted":    "457897212626731008",
      "infused":    "457897260643123200",
      "corrupted":  "457897319149600779",
      "cursed":     "457897523026198528",
      "genuine":    "457897612960333834",
      "heroic":     "457897849989103617",
      "auspicious": "457897953777025039",
      "inscribed":  "457898020462395422"
    },
    "ancient": {
      "exalted":    "457898202880933891",
      "infused":    "457898453964554241",
      "corrupted":  "457898614614917124",
      "cursed":     "457898692590960650",
      "genuine":    "457898924699811852",
      "heroic":     "457899014478888971",
      "auspicious": "457899092144816128",
      "inscribed":  "457899266384592907"
    },
    "legend": {
      "exalted":    "457899830996369409",
      "infused":    "457898453964554241",
      "corrupted":  "467939207986413570",
      "cursed":     "457900025461211137",
      "genuine":    "457900077583826945",
      "heroic":     "457900166360465408",
      "auspicious": "457900270379335681",
      "inscribed":  "457900350402330625"
    },
    "archon": {
      "exalted":    "457900483756163073",
      "infused":    "457900682016456717",
      "corrupted":  "457900747292672002",
      "cursed":     "457900803881959437",
      "genuine":    "457900884257538059",
      "heroic":     "457901287409844225",
      "auspicious": "457901420926992385",
      "inscribed":  "457901509481594892"
    },
    "crusader": {
      "exalted":    "457901942379773962",
      "infused":    "457902046755028994",
      "corrupted":  "457902096960847883",
      "cursed":     "457902324887584769",
      "genuine":    "457902531839000596",
      "heroic":     "457902595390963712",
      "auspicious": "457902728652390402",
      "inscribed":  "457902840094916614"
    },
    "guardian": {
      "exalted":    "457903068109996034",
      "infused":    "457903161160630302",
      "corrupted":  "457903198443798528",
      "cursed":     "457903247626076180",
      "genuine":    "457902531839000596",
      "heroic":     "457903496205959178",
      "auspicious": "457903558528991232",
      "inscribed":  "457903609011765260"
    },
    "herald": {
      "exalted":    "457903705094881300",
      "infused":    "457903889090478081",
      "corrupted":  "457903988512260096",
      "cursed":     "457904138701897742",
      "genuine":    "457904248756371466",
      "heroic":     "457904332206112769",
      "auspicious": "457904386945974284",
      "inscribed":  "457904483373154305"
    }
  },

  // Default per-server settings. These settings are entered in a database on first load, 
  // And are then completely ignored from this file. To modify default settings, use the `conf` command.
  // DO NOT REMOVE THIS BEFORE YOUR BOT IS LOADED AND FUNCTIONAL.
  
  "defaultSettings" : {
    "prefix": "!",
    "modRole": "Moderator",
    "adminRole": "Administrator",
    "systemNotice": "true",
    "welcomeEnabled": "true",
    "welcomeChannel": "general",
    "socialNotice": "true",
    "socialSystem": "true",
    "socialInventory": "true",
    "scoreTime": "5",
    "dailyTime": "24",
    "pointsReward": "200",
    "minPoints": "1",
    "maxPoints": "50",
    "costMulti": "2"
  },

  // PERMISSION LEVEL DEFINITIONS.

  permLevels: [
    // This is the lowest permisison level, this is for non-roled users.
    { level: 0,
      name: "User", 
      // Don't bother checking, just return true which allows them to execute any command their
      // level allows them to.
      check: () => true
    },

    // This is your permission level, the staff levels should always be above the rest of the roles.
    { level: 2,
      // This is the name of the role.
      name: "Moderator",
      // The following lines check the guild the message came from for the roles.
      // Then it checks if the member that authored the message has the role.
      // If they do return true, which will allow them to execute the command in question.
      // If they don't then return false, which will prevent them from executing the command.
      check: (message) => {
        try {
          const modRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.modRole.toLowerCase());
          if (modRole && message.member.roles.has(modRole.id)) return true;
        } catch (e) {
          return false;
        }
      }
    },

    { level: 3,
      name: "Administrator", 
      check: (message) => {
        try {
          const adminRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.adminRole.toLowerCase());
          return (adminRole && message.member.roles.has(adminRole.id));
        } catch (e) {
          return false;
        }
      }
    },
    // This is the server owner.
    { level: 4,
      name: "Server Owner", 
      // Simple check, if the guild owner id matches the message author's ID, then it will return true.
      // Otherwise it will return false.
      check: (message) => message.channel.type === "text" ? (message.guild.owner.user.id === message.author.id ? true : false) : false
    },

    // Bot Support is a special inbetween level that has the equivalent of server owner access
    // to any server they joins, in order to help troubleshoot the bot on behalf of owners.
    { level: 8,
      name: "Bot Support",
      // The check is by reading if an ID is part of this array. Yes, this means you need to
      // change this and reboot the bot to add a support user. Make it better yourself!
      check: (message) => config.supports.includes(message.author.id)
    },

    // Bot Admin has some limited access like rebooting the bot or reloading commands.
    { level: 9,
      name: "Bot Admin",
      check: (message) => config.admins.includes(message.author.id)
    },

    // This is the bot owner, this should be the highest permission level available.
    // The reason this should be the highest level is because of dangerous commands such as eval
    // or exec (if the owner has that).
    { level: 10,
      name: "Bot Owner", 
      // Another simple check, compares the message author id to the one stored in the config file.
      check: (message) => message.client.appInfo.owner.id === message.author.id
    }
  ]
};

module.exports = config;
